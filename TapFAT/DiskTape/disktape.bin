local a,b,c=component,computer;local d,e,f=a.proxy(a.list('gpu')()),a.invoke,a.list("eeprom")()local function g(h)local i,j=load("return "..h,"=data",nil,{math={huge=math.huge}})if not i then return nil,j end;local k,l=pcall(i)if not k then return nil,l end;return l end;local m;if b.getArchitecture()~="Lua 5.2"then m=load([[return function(a)local b,c=1,{}local d=''while b<=#a do local e=string.byte(a,b)b=b+1;for f=1,8 do local g=nil;if e&1~=0 then if b<=#a then g=string.sub(a,b,b)b=b+1 end else if b+1<=#a then local h=string.unpack('>I2',a,b)b=b+2;local i=h>>4+1;local j=h&15+3;g=string.sub(d,i,i+j-1)end end;e=e>>1;if g then c[#c+1]=g;d=string.sub(d..g,-4096)end end end;return table.concat(c)end]])()end;local function n(o,b)local p,q=0,0;while p<#o do p=p+1;local r=q;q=q+o[p][2]if r<=b and q>=b then return p end end;return false end;local function s(t,u,p)local q=0;while t<=u do q=q+p[3][t][2]t=t+1 end;return q end;local function v(w)e(w,"seek",-math.huge)local x,y=e(w,"read",8192)if x:sub(0,2)=="{{"then y=x:match("[^\0]+")elseif x:sub(3,4)=="\120\156"then if not a.list('data')()then error('inflate: Data card required',0)end;y=a.proxy(a.list('data')()).inflate(string.unpack('s2',x))else if not m then error('LZSS decompression: Lua 5.3 or newer required',0)end;y=m(string.unpack('s2',x))end;if not y or y==""then error('FAT corrupted: table not found',0)end;local z,A=g(y)if not z then error('FAT corrupted: '..(A or'unknown reason'),0)else return z end end;local function B(w)local C=v(w)local t=C[1]['bootldr.sys']if not t then error("File bootldr.sys is not found",0)end;if t[1]==0 then error("Empty bootldr.sys",0)end;e(w,"seek",-math.huge)local D,E=n(t[3],0),n(t[3],0+t[1]-1)if not E then E=#t[3]end;e(w,"seek",t[3][D][1]-s(1,D-1,t))local F=e(w,"read",t[3][D][2])D=D+1;while D<E+1 do e(w,"seek",-math.huge)e(w,"seek",t[3][D][1])F=F..e(w,"read",t[3][D][2])D=D+1 end;F=F:sub(0,t[1])return F end;d.setBackground(0x000000)d.setForeground(0xFFFFFF)d.fill(1,1,300,300,' ')d.set(1,1,'<--[DiskTape Lua BIOS]-->')d.set(1,2,"2021-2023 (C) Compys S&N Systems")b.beep(1000,0.2)d.set(1,4,"Looking for streamer...")if a.list('tape_drive')()then d.set(25,4,'found!')local G,H=a.proxy(a.list('tape_drive')())while not G.isReady()do d.set(1,5,"Insert tape or press any key to skip streamer!")local I=b.pullSignal(1)if I=='key_down'then H=true;break end end;if not H then load(B(G.address))()a.proxy(f).setData(G.address:gsub("-","").."-tap")end else d.set(25,4,'not found!')d.set(1,5,'Booting from standard devices...')end;b.pullSignal(1)do local function J(K,L,...)local i=table.pack(pcall(a.invoke,K,L,...))if not i[1]then return nil,i[2]else return table.unpack(i,2,i.n)end end;b.getBootAddress=function()return J(f,"getData")end;b.setBootAddress=function(M)return J(f,"setData",M)end;do local N=a.list("screen")()if d and screen then J(d,"bind",N)end end;local function O(K)local P=J(K,"open","/init.lua")if not P then P=J(K,"open","/OS.lua")if not P then return nil,"/init.lua or /OS.lua"end end;local Q=""repeat local h,i=J(K,"read",P,math.huge)if not h and i then return nil,i end;Q=Q..(h or"")until not data;J(K,"close",P)return load(Q,"=init")end;local i;if b.getBootAddress()then c,i=O(b.getBootAddress())end;if not c then b.setBootAddress()for K in a.list("filesystem")do c,i=O(K)if c then b.setBootAddress(K)break end end end;if not c then error("No bootable medium found"..(i and": "..tostring(i)or""),0)end end;c()
