local computer=computer;local component=component;local unicode=unicode;local a={}local b={tabcom=false,stordate=true}local c;for d in component.list('filesystem')do local e=component.proxy(d)if e.getLabel()=='tmpfs'then c=e;break end end;local function f(g)local h="^[%a_][%w_]*$"local i={}local j={}local function k(l,m)local n=type(l)if n=="number"then if l~=l then table.insert(j,"0/0")elseif l==math.huge then table.insert(j,"math.huge")elseif l==-math.huge then table.insert(j,"-math.huge")else table.insert(j,tostring(l))end elseif n=="string"then table.insert(j,(string.format("%q",l):gsub("\\\n","\\n")))elseif n=="nil"or n=="boolean"then table.insert(j,tostring(l))elseif n=="table"then i[l]=true;local o;local p=getmetatable(l)o=table.pack((p and p.__pairs or pairs)(l))local q=1;local r=true;table.insert(j,"{")for d,s in table.unpack(o)do if not r then table.insert(j,",")end;r=nil;local t=type(d)if t=="number"and d==q then q=q+1;k(s,m+1)else if t=="string"and string.match(d,h)then table.insert(j,d)else table.insert(j,"[")k(d,m+1)table.insert(j,"]")end;table.insert(j,"=")k(s,m+1)end end;i[l]=nil;table.insert(j,"}")else error("unsupported type: "..n,0)end end;k(g,1)local u=table.concat(j)return u end;local function v(w)local u,x=load("return "..w,"=data",nil,{math={huge=math.huge}})if not u then return nil,x end;local y,z=pcall(u)if not y then return nil,z end;return z end;local function A(B)local u={}for d,C in pairs(B)do u[d]=C end;return u end;local function D(E)local F={}for G in E:gmatch("[^\\/]+")do local H,I=G:find("^%.?%.$")if H then if I==2 then table.remove(F)end else table.insert(F,G)end end;return F end;local function J(E)local u=table.concat(D(E),"/")if unicode.sub(E,1,1)=="/"then return"/"..u else return u end end;local function K()if not b.stordate then return 0 end;local L='lt'local o=c.open(L,"w")c.close(o)local M=c.lastModified(L)c.remove(L)return math.ceil(M)end;local function N(O,P,Q,R)if#O<1 then return P end;local q=1;local S=P;while q<#O do if S[O[q]]==nil then return false end;S=S[O[q]]q=q+1 end;if not Q then return S[O[q]]or false else S[O[q]]=R;return true end end;local function T(O,P,R)return N(O,P,true,R)end;local function U(P,V)V=V or 0;for W,X in pairs(P)do if type(X)=="table"then if X[1]==-1 then V=U(X,V)else V=V+X[1]end end end;return V end;local function Y(O,P,Z)if Z>#O then return true end;local _={}local q=0;while q<Z do table.insert(_,O[q+1])q=q+1 end;dir=N(_,P)if dir==false then T(_,P,{-1,K()})end;return Y(O,P,Z+1)end;local function a0(a1,a2,a3)for d,a4 in pairs(a1)do if type(d)~='number'then if a4[1]==-1 then local a5=A(a3)table.insert(a5,d)local a6=N(a5,a2[1])if not a6 then return a6 end;if not a0(a6,a2,a5)then return false end else for W,a7 in pairs(a1[3])do table.insert(a2[2],a7)end end end end;T(a3,a2[1],nil)return true end;local function a8(a9,aa)local q=0;local ab=0;while q<#a9 do q=q+1;local ac=ab;ab=ab+a9[q][2]-a9[q][1]if ac<=aa and ab>=aa then return q end end;return false end;local function ad(ae,af,a1)local ab=0;while ae<=af do ab=ab+a1[3][ae][2]-a1[3][ae][1]ae=ae+1 end;return ab end;local function ag(ah,ai)if ah[1]<ai[1]then return true else return false end end;local aj,ak;if computer.getArchitecture()=="Lua 5.3"then aj,ak=load([[return function(a)local b,c=1,{}local d=''local function e()for f=18,3,-1 do local g=string.sub(a,b,b+f-1)local h=string.find(d,g,1,true)if h then return h,g end end end;while b<=#a do local i,j=0,{}for f=0,7 do if b<=#a then local h,g=e()if h and#g>=3 then local k=h-1<<4|#g-3;j[#j+1]=string.pack('>I2',k)else i=i|(1<<f)g=string.sub(a,b,b)j[#j+1]=g end;d=string.sub(d..g,-4096)b=b+#g else break end end;if#j>0 then c[#c+1]=string.char(i)c[#c+1]=table.concat(j)end end;return table.concat(c)end,function(a)local b,c=1,{}local d=''while b<=#a do local i=string.byte(a,b)b=b+1;for f=1,8 do local g=nil;if i&1~=0 then if b<=#a then g=string.sub(a,b,b)b=b+1 end else if b+1<=#a then local k=string.unpack('>I2',a,b)b=b+2;local h=k>>4+1;local l=k&15+3;g=string.sub(d,h,h+l-1)end end;i=i>>1;if g then c[#c+1]=g;d=string.sub(d..g,-4096)end end end;return table.concat(c)end]])()end;local al={}function al.proxy(am)local an=false;for d,s in component.list("tape_drive")do if d==am and s=="tape_drive"then an=true;break end end;if not an then error("No such component",2)end;local ao;component.invoke(am,"seek",-math.huge)local ap={}ap.type="filesystem"ap.address=am:gsub("-","").."-tap"ap.isReady=function()return component.invoke(am,"isReady")end;ap.setDriveProperty=function(aq,g)checkArg(1,aq,"string")checkArg(2,g,"number","string","boolean")if b[aq]==nil then return nil,'Invalid property'end;b[aq]=g;return true end;ap.getDriveProperty=function(aq)checkArg(1,aq,"string")if b[aq]==nil then return nil,'Invalid property'end;return b[aq]end;ap.getTable=function()if not ap.isReady()then error('Device is not ready',0)end;component.invoke(am,"seek",-math.huge)local ar=component.invoke(am,"read",8192)local as;if ar:sub(0,2)=="{{"then as=ar:match("[^\0]+")elseif ar:sub(3,4)=="\120\156"then if not component.isAvailable('data')then error('inflate: Data card required',0)end;if not string.unpack then error('string.unpack: Lua 5.3 required',0)end;as=component.data.inflate(string.unpack('s2',ar))else if not ak then error('LZSS decompression: Lua 5.3 required',0)end;as=ak(string.unpack('s2',ar))end;if not as or as==""then error('FAT corrupted: table not found',0)end;local at,au=v(as)if not at then error('FAT corrupted: '..(au or'unknown reason'),0)else return at end end;ap.setTable=function(av)checkArg(1,av,"table")if not ap.isReady()then error('Device is not ready',0)end;local aw=f(av)if b.tabcom==1 then if not aj then error('LZSS compression: Lua 5.3 required',0)end;aw=string.pack('s2',aj(aw))elseif b.tabcom==2 then if not component.isAvailable('data')then error('deflate: Data card required',0)end;if not string.pack then error('string.pack: Lua 5.3 required',0)end;aw=string.pack('s2',component.data.deflate(aw))end;if#aw>8192 then return nil,'Not enough space for FAT'end;if#aw~=8192 then aw=aw.."\0"end;component.invoke(am,"seek",-math.huge)component.invoke(am,"write",aw)return#aw end;ap.format=function(ax)ax=ax or false;checkArg(1,ax,"boolean")if not ap.isReady()then error('Device is not ready',0)end;local ay=component.invoke(am,"getSize")if not ax then component.invoke(am,"seek",-math.huge)local az=string.rep("\0",8192)for q=1,ay+8191,8192 do component.invoke(am,"write",az)end end;local aA,au=ap.setTable({{},{{8192,math.ceil(ay)-1}}})if not aA then return aA,au else return true end end;ap.isDirectory=function(E)checkArg(1,E,"string")if not ap.isReady()then error('Device is not ready',0)end;E=J(E)if E==''then return true end;local a3=D(E)local a2=ap.getTable()local aB=N(a3,a2[1])if type(aB)~='table'then return false end;if aB[1]==-1 then return true else return false end end;ap.lastModified=function(E)checkArg(1,E,"string")E=J(E)if not ap.isReady()then error('Device is not ready',0)end;local a2=ap.getTable()local a3=D(E)local a1=N(a3,a2[1])if not a1 then return 0 end;return a1[2]end;ap.list=function(E)checkArg(1,E,"string")E=J(E)if not ap.isReady()then error('Device is not ready',0)end;local a2=ap.getTable()local a3=D(E)local aC=N(a3,a2[1])if aC==false then return nil,'no such file or directory: '..E end;local aB={}if aC[1]~=-1 and#a3~=0 then return{a3[#a3],n=1}end;for d,C in pairs(aC)do if type(d)~='number'then if C[1]==-1 then table.insert(aB,d..'/')else table.insert(aB,d)end end end;aB.n=#aB;return aB end;ap.spaceTotal=function()if not ap.isReady()then error('Device is not ready',0)end;return component.invoke(am,"getSize")-8193 end;ap.open=function(E,aD)aD=aD or'r'checkArg(1,E,"string")checkArg(2,aD,"string")if not ap.isReady()then error('Device is not ready',0)end;local aE;local a2=ap.getTable()local a3=D(E)if aD~="r"and aD~="rb"and aD~="w"and aD~="wb"and aD~="a"and aD~="ab"then error("unsupported mode",2)end;local aF=true;while aF do aE=math.random(1000000000,9999999999)if a[aE]==nil then if aD=="r"or aD=="rb"then local aG=N(a3,a2[1])if not aG or aG[1]==-1 then return nil,E end;a[aE]={seek=0,mode='r',path=a3}elseif aD=="w"or aD=="wb"then a[aE]={seek=0,mode='w',path=a3}local aG=N(a3,a2[1])if aG then for W,aH in pairs(aG[3])do table.insert(a2[2],aH)end;table.sort(a2[2],ag)local aI=1;while aI<#a2[2]do if a2[2][aI][2]==a2[2][aI+1][1]then a2[2][aI][2]=a2[2][aI+1][2]table.remove(a2[2],aI+1)else aI=aI+1 end end elseif#a2[2]==0 then return nil,"not enough space"end;if not T(a3,a2[1],{0,K(),{}})then return false end elseif aD=="a"or aD=="ab"then local aG=N(a3,a2[1])local aJ;if not aG then if not T(a3,a2[1],{0,K(),{}})then return false end else aJ=aG[1]+1 end;a[aE]={seek=aJ,mode='a',path=a3}end;aF=false end end;if aD=="a"or aD=="ab"or aD=="w"or aD=="wb"then local aA,au=ap.setTable(a2)if not aA then return aA,au else return aE end else return aE end end;ap.remove=function(E)checkArg(1,E,"string")if not ap.isReady()then error('Device is not ready',0)end;E=J(E)if E==''then return false end;local a2=ap.getTable()local a3=D(E)local a1=N(a3,a2[1])if a1==false then return false end;if a1[1]==-1 then a0(a1,a2,a3)else for W,a7 in pairs(a1[3])do table.insert(a2[2],a7)end;T(a3,a2[1],nil)end;table.sort(a2[2],ag)local aI=1;while aI<#a2[2]do if a2[2][aI][2]==a2[2][aI+1][1]then a2[2][aI][2]=a2[2][aI+1][2]table.remove(a2[2],aI+1)else aI=aI+1 end end;local aA,au=ap.setTable(a2)if not aA then return aA,au else return true end end;ap.rename=function(E,aK)checkArg(1,E,"string")checkArg(1,aK,"string")if not ap.isReady()then error('Device is not ready',0)end;E=J(E)local a2=ap.getTable()local a3=D(E)local aL=D(aK)local a1=N(a3,a2[1])local aM=N(aL,a2[1])if not a1 or aM then return false end;if a1[1]~=-1 then aL=D(aK)end;T(a3,a2[1],nil)if not T(aL,a2[1],a1)then return false end;local aA,au=ap.setTable(a2)if not aA then return aA,au else return true end end;ap.read=function(aN,aO)aO=aO or 1;checkArg(1,aN,"number")checkArg(2,aO,"number")if not ap.isReady()then error('Device is not ready',0)end;if a[aN]==nil or a[aN].mode~="r"then return nil,"bad file descriptor"end;local a2=ap.getTable()local a1=N(a[aN].path,a2[1])if not a1 then a[aN]=nil;return nil,"bad file descriptor"end;if a1[1]==0 or a1[1]<a[aN].seek+1 then return nil end;if a1[1]>=a[aN].seek+1 and a1[1]<a[aN].seek+aO then aO=a1[1]-a[aN].seek end;component.invoke(am,"seek",-math.huge)local aP=a8(a1[3],a[aN].seek)local aQ=a8(a1[3],a[aN].seek+aO)if not aQ then aQ=#a1[3]end;component.invoke(am,"seek",a1[3][aP][1]+a[aN].seek-ad(1,aP-1,a1))local w=component.invoke(am,"read",a1[3][aP][2]-a1[3][aP][1])aP=aP+1;while aP<aQ+1 do component.invoke(am,"seek",-math.huge)component.invoke(am,"seek",a1[3][aP][1])w=w..component.invoke(am,"read",a1[3][aP][2]-a1[3][aP][1])aP=aP+1 end;w=w:sub(0,aO)a[aN].seek=a[aN].seek+#w;return w end;ap.close=function(aN)checkArg(1,aN,"number")if not ap.isReady()then error('Device is not ready',0)end;if a[aN]==nil then return nil,"bad file descriptor"end;a[aN]=nil end;ap.getLabel=function()if not ap.isReady()then error('Device is not ready',0)end;return component.invoke(am,"getLabel")end;ap.seek=function(aN,aR,aS)checkArg(1,aN,"number")checkArg(2,aR,"string")checkArg(3,aS,"number")if not ap.isReady()then error('Device is not ready',0)end;if a[aN]==nil then return nil,"bad file descriptor"end;if aR~="set"and aR~="cur"and aR~="end"then error("invalid mode",2)end;if aS<0 then return nil,"Negative seek offset"end;local aT;if aR=="set"then aT=aS elseif aR=="cur"then aT=a[aN].seek+aS elseif aR=="end"then aT=component.invoke(am,"getSize")+aS-1 end;a[aN].seek=math.min(math.max(aT,0),component.invoke(am,"getSize")-1)return a[aN].seek end;ap.size=function(E)checkArg(1,E,"string")if not ap.isReady()then error('Device is not ready',0)end;E=J(E)if E==''then return 0 end;local a2=ap.getTable()local a3=D(E)local a1=N(a3,a2[1])if not a1 or a1[1]==-1 then return 0 end;return a1[1]end;ap.isReadOnly=function()if not ap.isReady()then error('Device is not ready',0)end;return false end;ap.setLabel=function(aU)if not ap.isReady()then error('Device is not ready',0)end;component.invoke(am,"setLabel",aU)return aU end;ap.makeDirectory=function(E)checkArg(1,E,"string")if not ap.isReady()then error('Device is not ready',0)end;E=J(E)local a2=ap.getTable()local a3=D(E)Y(a3,a2[1],1)local aA,au=ap.setTable(a2)if not aA then return aA,au else return true end end;ap.exists=function(E)checkArg(1,E,"string")if not ap.isReady()then error('Device is not ready',0)end;E=J(E)if E==''then return true end;local a3=D(E)local a2=ap.getTable()local aB=N(a3,a2[1])if aB then return true else return aB end end;ap.spaceUsed=function()if not ap.isReady()then error('Device is not ready',0)end;return U(ap.getTable()[1])end;ap.write=function(aN,w)checkArg(1,aN,"number")checkArg(2,w,"string")if not ap.isReady()then error('Device is not ready',0)end;if a[aN]==nil or a[aN].mode=="r"then return nil,"bad file descriptor"end;local a2=ap.getTable()if#a2[2]==0 then return nil,"not enough space"end;local a3=a[aN].path;local a1=N(a3,a2[1])a[aN].seek=a[aN].seek+#w;if a[aN].seek>a1[1]or#a1[3]==0 then a1[1]=a1[1]+#w;while true do if#a2[2]==0 then a1[1]=ad(1,#a1[3],a1)local aA,au=ap.setTable(a2)if not aA then return aA,au else return true end elseif a2[2][1][2]-a2[2][1][1]<#w then table.insert(a1[3],{a2[2][1][1],a2[2][1][2]})component.invoke(am,"seek",-math.huge)component.invoke(am,"seek",a2[2][1][1])component.invoke(am,"write",w:sub(0,a2[2][1][2]-a2[2][1][1]))w=w:sub(a2[2][1][2]-a2[2][1][1]+1)table.remove(a2[2],1)else table.insert(a1[3],{a2[2][1][1],a2[2][1][1]+#w})component.invoke(am,"seek",-math.huge)component.invoke(am,"seek",a2[2][1][1])component.invoke(am,"write",w)if a2[2][1][1]+#w==a2[2][1][2]then table.remove(a2[2],1)else a2[2][1][1]=a2[2][1][1]+#w end;break end end elseif a[aN].seek+#w>a1[1]then a1[1]=a[aN].seek+#w;local aP=a8(a1[3],a[aN].seek)local aQ=#a1[3]if not aQ then aQ=#a1[3]end;component.invoke(am,"seek",a1[3][aP][1]+a[aN].seek-ad(1,aP-1,a1))component.invoke(am,"write",w:sub(0,a1[3][aP][2]-a1[3][aP][1]))w=w:sub(a1[3][aP][2]-a1[3][aP][1])aP=aP+1;while aP<aQ+1 do component.invoke(am,"seek",-math.huge)component.invoke(am,"seek",a1[3][aP][1])component.invoke(am,"write",w:sub(0,a1[3][aP][2]-a1[3][aP][1]))w=w:sub(a1[3][aP][2]-a1[3][aP][1]+1)aP=aP+1 end;while true do if#a2[2]==0 then a1[1]=ad(1,#a1[3],a1)local aA,au=ap.setTable(a2)if not aA then return aA,au else return true end elseif a2[2][1][2]-a2[2][1][1]<#w then table.insert(a1[3],{a2[2][1][1],a2[2][1][2]})component.invoke(am,"seek",-math.huge)component.invoke(am,"seek",a2[2][1][1])component.invoke(am,"write",w:sub(0,a2[2][1][2]-a2[2][1][1]))w=w:sub(a2[2][1][2]-a2[2][1][1]+1)table.remove(a2[2],1)else table.insert(a1[3],{a2[2][1][1],a2[2][1][1]+#w})component.invoke(am,"seek",-math.huge)component.invoke(am,"seek",a2[2][1][1])component.invoke(am,"write",w)if a2[2][1][1]+#w==a2[2][1][2]then table.remove(a2[2],1)else a2[2][1][1]=a2[2][1][1]+#w end;break end end else local aP=a8(a1[3],a[aN].seek)local aQ=a8(a1[3],a[aN].seek+#w)if not aQ then aQ=#a1[3]end;component.invoke(am,"seek",a1[3][aP][1]+a[aN].seek-ad(1,aP-1,a1))component.invoke(am,"write",w:sub(0,a1[3][aP][2]-a1[3][aP][1]))w=w:sub(a1[3][aP][2]-a1[3][aP][1])aP=aP+1;while aP<aQ+1 do component.invoke(am,"seek",-math.huge)component.invoke(am,"seek",a1[3][aP][1])component.invoke(am,"write",w:sub(0,a1[3][aP][2]-a1[3][aP][1]))w=w:sub(a1[3][aP][2]-a1[3][aP][1]+1)aP=aP+1 end end;local aI=1;while aI<#a1[3]do if a1[3][aI][2]==a1[3][aI+1][1]then a1[3][aI][2]=a1[3][aI+1][2]table.remove(a1[3],aI+1)else aI=aI+1 end end;T(a3,a2[1],a1)local aA,au=ap.setTable(a2)if not aA then return aA,au else return true end end;return ap end;local aV=al.proxy(component.list('tape_drive')())local aW=component.proxy;function component.proxy(am)checkArg(1,am,"string")if aV.address==am then return aV end;return aW(am)end;local aX=component.list;function component.list(aY,aZ)local a_=aX(aY,aZ)if aY==nil or aZ and aY=='filesystem'or not aZ and('filesystem'):find(aY,nil,true)then a_[aV.address]='filesystem'end;return a_ end;local b0=component.invoke;function component.invoke(am,b1,...)checkArg(1,am,"string")checkArg(2,b1,"string")if aV.address==am then if aV[b1]==nil then error("no such method",2)end;return aV[b1](...)end;return b0(am,b1,...)end